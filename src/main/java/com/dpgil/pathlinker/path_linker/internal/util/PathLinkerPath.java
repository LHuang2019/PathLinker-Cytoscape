package com.dpgil.pathlinker.path_linker.internal.util;

import java.util.ArrayList;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Path class that represents the path generated by PathLinker
 *      Each path contains a path rank in the corresponding network,
 *      the total path weight
 *      an array list of nodes names that is included in the path
 *      
 * @author Li Huang
 * @version 12.7.2017
 */
@ApiModel(value="PathLinker Path", 
description="Path object consists of path index, path score, and the name of vertices that constructs the path")
public class PathLinkerPath {

    /** the path rank */
    private int pathRank;
    /** the total score of the path */
    private double  pathScore;
    /** the list of nodes in string in order in the path */
    private ArrayList<String> path;

    /**
     * Default constructor
     * @param pathRank     the path rank
     * @param pathScore    the path score
     * @param path         the path list
     */
    public PathLinkerPath (int pathRank, double pathScore, ArrayList<String> path) {
        this.pathRank = pathRank;
        this.pathScore = pathScore;
        this.path = path;
    }

    /**
     * Getter method for path index
     * @return the pathIndex
     */
    @ApiModelProperty(value = "The rank of the path in the given list of PathLinkerPath. The rank is indicated by path score", 
            example = "1", required = true)
    public int getPathRank() {
        return pathRank;
    }

    /**
     * Getter method for path score
     * @return the pathScore
     */
    @ApiModelProperty(value = "The total score/lengths the path consists", example = "2", required = true)
    public double getPathScore() {
        return pathScore;
    }

    /**
     * Getter method for the path list
     * @return the path
     */
    @ApiModelProperty(value = "The path is given as an array of node names which represent the edges used in the path. "
            + "The node names match the name column in the Node Table", 
            example = "[Node1, Node2, Node3]", required = true)
    public ArrayList<String> getPath() {
        return path;
    }
}
